{"name":"Gittest001","tagline":"","body":"<!-- the line below needs to be an empty line C: (its because kramdown isnt\r\n     that smart and dearly wants an empty line before a heading to be able to\r\n     display it as such, e.g. website) -->\r\n\r\n# [Pull Request Test001]Design pattern samples in Java\r\n\r\n[![Build status](https://travis-ci.org/hiddenid01/gitTest001.svg?branch=master)](https://travis-ci.org/hiddenid01/gitTest001)\r\n[![Coverage Status](https://coveralls.io/repos/hiddenid01/gitTest001/badge.svg?branch=master)](https://coveralls.io/r/hiddenid01/gitTest001?branch=master)\r\n[![Coverity Scan Build Status](https://scan.coverity.com/projects/6431/badge.svg)](https://scan.coverity.com/projects/6431)\r\n[![Chat Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/hiddenid01/gitTest001?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\r\n\r\n# Introduction\r\n\r\nDesign patterns are formalized best practices that the programmer can use to\r\nsolve common problems when designing an application or system.\r\n\r\nDesign patterns can speed up the development process by providing tested, proven\r\ndevelopment paradigms.\r\n\r\nReusing design patterns helps to prevent subtle issues that can cause major\r\nproblems, and it also improves code readability for coders and architects who\r\nare familiar with the patterns.\r\n\r\n# Getting started\r\n\r\nBefore you dive into the material, you should be familiar with various \r\n[Programming/Software Design Principles](http://webpro.github.io/programming-principles/). \r\n\r\nOnce you are familiar with these concepts you can start drilling down into patterns by any of the following approaches\r\n\r\n - Using difficulty tags, `Difficulty-Beginner`, `Difficulty-Intermediate` & `Difficulty-Expert`.\r\n - Using pattern categories, `Creational`, `Behavioral` and others.\r\n - Search for a specific pattern. Can't find one? Please report a new pattern [here](https://github.com/iluwatar/java-design-patterns/issues).\r\n\r\n# How to contribute\r\n\r\nIf you are willing to contribute to the project you will find the relevant information in our [developer wiki](https://github.com/iluwatar/java-design-patterns/wiki).\r\n\r\n# Credits\r\n\r\n* [Design Patterns: Elements of Reusable Object-Oriented Software](http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612)\r\n* [Effective Java (2nd Edition)](http://www.amazon.com/Effective-Java-Edition-Joshua-Bloch/dp/0321356683)\r\n* [Java Generics and Collections](http://www.amazon.com/Java-Generics-Collections-Maurice-Naftalin/dp/0596527756/)\r\n* [Let's Modify the Objects-First Approach into Design-Patterns-First](http://edu.pecinovsky.cz/papers/2006_ITiCSE_Design_Patterns_First.pdf)\r\n* [Pattern Languages of Program Design](http://www.amazon.com/Pattern-Languages-Program-Design-Coplien/dp/0201607344/ref=sr_1_1)\r\n* [Presentation Tier Patterns](http://www.javagyan.com/tutorials/corej2eepatterns/presentation-tier-patterns)\r\n* [Functional Programming in Java: Harnessing the Power of Java 8 Lambda Expressions](http://www.amazon.com/Functional-Programming-Java-Harnessing-Expressions/dp/1937785467/ref=sr_1_1)\r\n* [Patterns of Enterprise Application Architecture](http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420)\r\n* [Spring Data](http://www.amazon.com/Spring-Data-Mark-Pollack/dp/1449323952/ref=sr_1_1)\r\n* [J2EE Design Patterns](http://www.amazon.com/J2EE-Design-Patterns-William-Crawford/dp/0596004273/ref=sr_1_2)\r\n* [Pattern Oriented Software Architecture Vol I-V](http://www.amazon.com/Pattern-Oriented-Software-Architecture-Volume-Patterns/dp/0471958697)\r\n\r\n# License\r\n\r\nThis project is licensed under the terms of the MIT license.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}